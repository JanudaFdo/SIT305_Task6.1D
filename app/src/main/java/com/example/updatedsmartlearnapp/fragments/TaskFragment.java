package com.example.updatedsmartlearnapp.fragments;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Bundle;
import android.view.*;
import android.widget.*;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.navigation.Navigation;
import com.example.updatedsmartlearnapp.R;
import com.example.updatedsmartlearnapp.models.QuizQuestion;
import com.example.updatedsmartlearnapp.models.QuizResponse;
import com.example.updatedsmartlearnapp.network.QuizService;
import com.example.updatedsmartlearnapp.network.RetrofitClient;
import com.google.gson.Gson;
import java.util.List;
import retrofit2.*;

public class TaskFragment extends Fragment {

    private LinearLayout quizContainer;
    private LinearLayout loadingLayout;
    private ScrollView scrollView;
    private List<QuizQuestion> questions;
    private int currentQuestionIndex = 0;
    private final String topic = "android";

    public TaskFragment() {}

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_task, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        quizContainer = view.findViewById(R.id.quiz_container);
        loadingLayout = view.findViewById(R.id.loading_layout);
        scrollView = view.findViewById(R.id.scroll_quiz_container); //  added reference

        loadQuiz(view);
    }

    private void loadQuiz(View view) {
        QuizService service = RetrofitClient.getClient().create(QuizService.class);
        service.getQuiz(topic).enqueue(new Callback<QuizResponse>() {
            @Override
            public void onResponse(Call<QuizResponse> call, Response<QuizResponse> response) {
                loadingLayout.setVisibility(View.GONE);
                scrollView.setVisibility(View.VISIBLE);

                if (response.isSuccessful() && response.body() != null) {
                    questions = response.body().getQuiz();

                    if (questions == null || questions.isEmpty()) {
                        Toast.makeText(getContext(), "No questions received from server.", Toast.LENGTH_LONG).show();
                        return;
                    }

                    // Save for result screen
                    SharedPreferences prefs = requireContext().getSharedPreferences("user_data", Context.MODE_PRIVATE);
                    String json = new Gson().toJson(response.body());
                    prefs.edit().putString("last_quiz", json).apply();

                    renderCurrentQuestion(view);
                } else {
                    Toast.makeText(getContext(), "Failed to load quiz", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<QuizResponse> call, Throwable t) {
                loadingLayout.setVisibility(View.GONE);
                scrollView.setVisibility(View.VISIBLE);
                Toast.makeText(getContext(), "Network error", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void renderCurrentQuestion(View view) {
        quizContainer.removeAllViews();

        // Fade-in animation
        quizContainer.setAlpha(0f);
        quizContainer.animate().alpha(1f).setDuration(500).start();

        // Title
        TextView title = new TextView(getContext());
        title.setText("Generated Task 1");
        title.setTextSize(24);
        title.setTypeface(null, Typeface.BOLD);
        title.setTextColor(Color.BLACK);
        title.setPadding(0, 0, 0, 10);
        quizContainer.addView(title);

        // Description
        TextView desc = new TextView(getContext());
        desc.setText("A formatted quiz with three questions, each with four options and a corresponding correct answer.");
        desc.setTextSize(16);
        desc.setTextColor(Color.DKGRAY);
        desc.setPadding(0, 0, 0, 20);
        quizContainer.addView(desc);

        if (questions == null || questions.size() <= currentQuestionIndex) {
            Toast.makeText(getContext(), "No question to display.", Toast.LENGTH_SHORT).show();
            return;
        }

        QuizQuestion q = questions.get(currentQuestionIndex);

        // Label
        TextView label = new TextView(getContext());
        label.setText("✨ Generated by AI");
        label.setTextColor(Color.CYAN);
        label.setTextSize(14);
        label.setTypeface(null, Typeface.ITALIC);
        label.setPadding(0, 0, 0, 8);
        quizContainer.addView(label);

        // Question
        TextView questionView = new TextView(getContext());
        questionView.setText((currentQuestionIndex + 1) + ". " + q.getQuestion());
        questionView.setTextColor(Color.BLACK);
        questionView.setTypeface(null, Typeface.BOLD);
        questionView.setTextSize(18);
        questionView.setPadding(0, 0, 0, 12);
        quizContainer.addView(questionView);

        // Options
        RadioGroup rg = new RadioGroup(getContext());
        for (String option : q.getOptions()) {
            RadioButton rb = new RadioButton(getContext());
            rb.setText(option);
            rb.setTextColor(Color.BLACK);
            rg.addView(rb);
        }
        quizContainer.addView(rg);

        // Navigation button
        Button navBtn = new Button(getContext());
        navBtn.setText(currentQuestionIndex == questions.size() - 1 ? "Submit" : "Next ➡");
        navBtn.setTextColor(Color.BLACK);
        navBtn.setTypeface(null, Typeface.BOLD);
        navBtn.setBackgroundColor(getResources().getColor(android.R.color.holo_green_light));
        navBtn.setPadding(20, 20, 20, 20);

        navBtn.setOnClickListener(v -> {
            if (currentQuestionIndex == questions.size() - 1) {
                Navigation.findNavController(view).navigate(R.id.action_taskFragment_to_resultFragment);
            } else {
                currentQuestionIndex++;
                renderCurrentQuestion(view);
            }
        });

        quizContainer.addView(navBtn);
    }
}
